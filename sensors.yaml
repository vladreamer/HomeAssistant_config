################
## WeatherSensor 
################
- platform: snmp
  name: 'UPS Battery capacity'
  host: 192.168.0.252
  baseoid: 1.3.6.1.4.1.318.1.1.1.2.2.1.0
  accept_errors: true
  unit_of_measurement: '%'

- platform: snmp
  name: 'UPS Battery temperature'
  host: 192.168.0.252
  baseoid: 1.3.6.1.4.1.318.1.1.1.2.2.2.0
  accept_errors: true
  unit_of_measurement: 'Â°C'

- platform: snmp
  name: 'UPS Battery runtime remain'
  host: 192.168.0.252
  baseoid: 1.3.6.1.4.1.318.1.1.1.2.2.3.0
  accept_errors: true
  unit_of_measurement: 'minutes'
  value_template: '{{((value | int) / 6000) | int}}'

- platform: snmp
  name: 'UPS input volts'
  host: 192.168.0.252
  baseoid: 1.3.6.1.4.1.318.1.1.1.3.2.1.0
  accept_errors: true
  unit_of_measurement: 'V'

################
## WeatherSensor 
################
- platform: yr
  name: Weather
  forecast: 24
  monitored_conditions:
  - temperature
  - precipitation
  - windSpeed
  - pressure
  - humidity
  - dewpointTemperature

################
## SystemStatus 
################
- platform: systemmonitor
  name: RasbPI
  resources:
  - type: disk_use_percent
    arg: /
  - type: last_boot
  - type: processor_use 

###############
##Date and Time
###############
- platform: time_date
  name: Time and Data
  display_options:
  - 'date'
  - 'date_time'
  - 'time'
  - 'time_date'
  - 'time_utc'

- platform: worldclock
  name: Time in Odessa
  time_zone: Europe/Kiev

##########################
## DoorSensors Batteries
##########################
#
    ############################################    
    ##  Kaipule IM20 Door/Window Sensor ID:34 
    ############################################    
- platform: template
  sensors:
    door01_battery:
      friendly_name: "BasementDoor_Battery"
      value_template: "{% if states.zwave.kaipule_im20_doorwindow_sensor %}
        {{ states.zwave.kaipule_im20_doorwindow_sensor.attributes.battery_level }}
        {% else %}
        unknown
        {% endif %}"
      unit_of_measurement: '%'
      # entity_id: zwave.kaipule_im20_doorwindow_sensor
      icon_template: >-
        {% set battery_level = states('sensor.door01_battery')|int('unknown') %}
        {% set battery_round = (battery_level|int / 10)|int * 10 %}
        {% if battery_level == 'unknown' %}
        mdi:battery-unknown
        {% else %}
        {% if battery_round >= 100 %}
        mdi:battery
        {% elif battery_round > 0 %}
        mdi:battery-{{ battery_round }}
        {% else %}
        mdi:battery-alert
        {% endif %}
        {% endif %}
    #    
    ############################################    
    ##  Kaipule IM20 Door/Window Sensor ID:36 
    ############################################    
    door02_battery:
      friendly_name: "EntranceDoor_Battery"
      value_template: "{% if states.zwave.kaipule_im20_doorwindow_sensor_2 %}
        {{ states.zwave.kaipule_im20_doorwindow_sensor_2.attributes.battery_level }}
        {% else %}
        unknown
        {% endif %}"
      unit_of_measurement: '%'
      # entity_id: zwave.kaipule_im20_doorwindow_sensor_2
      icon_template: >-
        {% set battery_level = states('sensor.door02_battery')|int('unknown') %}
        {% set battery_round = (battery_level|int / 10)|int * 10 %}
        {% if battery_level == 'unknown' %}
        mdi:battery-unknown
        {% else %}
        {% if battery_round >= 100 %}
        mdi:battery
        {% elif battery_round > 0 %}
        mdi:battery-{{ battery_round }}
        {% else %}
        mdi:battery-alert
        {% endif %}
        {% endif %}
    #    
    ############################################    
    ##  Kaipule IM20 Door/Window Sensor ID:37 
    ############################################    
    door03_battery:
      friendly_name: "BackDoor_Battery"
      value_template: "{% if states.zwave.kaipule_im20_doorwindow_sensor_3 %}
        {{ states.zwave.kaipule_im20_doorwindow_sensor_3.attributes.battery_level }}
        {% else %}
        unknown
        {% endif %}"
      unit_of_measurement: '%'
      # entity_id: zwave.kaipule_im20_doorwindow_sensor_3
      icon_template: >-
        {% set battery_level = states('sensor.door03_battery')|int('unknown') %}
        {% set battery_round = (battery_level|int / 10)|int * 10 %}
        {% if battery_level == 'unknown' %}
        mdi:battery-unknown
        {% else %}
        {% if battery_round >= 100 %}
        mdi:battery
        {% elif battery_round > 0 %}
        mdi:battery-{{ battery_round }}
        {% else %}
        mdi:battery-alert
        {% endif %}
        {% endif %}
    #    
    ############################################    
    ##  Ecolink Garage Door Tilt Sensor ID:35 
    ############################################    
    garagedoor_battery:
      friendly_name: "GarageDoor_Battery"
      value_template: "{% if states.zwave.ecolink_garage_door_tilt_sensor %}
        {{ states.zwave.ecolink_garage_door_tilt_sensor.attributes.battery_level }}
        {% else %}
        unknown
        {% endif %}"
      unit_of_measurement: '%'
      # entity_id: zwave.ecolink_garage_door_tilt_sensor
      icon_template: >-
        {% set battery_level = states('sensor.garagedoor_battery')|int('unknown') %}
        {% set battery_round = (battery_level|int / 10)|int * 10 %}
        {% if battery_level == 'unknown' %}
        mdi:battery-unknown
        {% else %}
        {% if battery_round >= 100 %}
        mdi:battery
        {% elif battery_round > 0 %}
        mdi:battery-{{ battery_round }}
        {% else %}
        mdi:battery-alert
        {% endif %}
        {% endif %}

##########################
## MultiSensors Batteries
##########################
- platform: template
  sensors:
    multi01_battery:
      friendly_name: "Multisensor1_Battery"
      value_template: "{% if states.zwave.vision_zp3111_multisensor_4in1_1 %}
        {{ states.zwave.vision_zp3111_multisensor_4in1_1.attributes.battery_level }}
        {% else %}
        unknown
        {% endif %}"
      unit_of_measurement: '%'
      # entity_id: zwave.zwave.vision_zp3111_multisensor_4in1_1
      icon_template: >-
        {% set battery_level = states('sensor.multi01_battery')|int('unknown') %}
        {% set battery_round = (battery_level|int / 10)|int * 10 %}
        {% if battery_level == 'unknown' %}
        mdi:battery-unknown
        {% else %}
        {% if battery_round >= 100 %}
        mdi:battery
        {% elif battery_round > 0 %}
        mdi:battery-{{ battery_round }}
        {% else %}
        mdi:battery-alert
        {% endif %}
        {% endif %}

    multi02_battery:
      friendly_name: "Multisensor2_Battery"
      value_template: "{% if states.zwave.vision_zp3111_multisensor_4in1_2 %}
        {{ states.zwave.vision_zp3111_multisensor_4in1_2.attributes.battery_level }}
        {% else %}
        unknown
        {% endif %}"
      unit_of_measurement: '%'
      # entity_id: zwave.multi02
      icon_template: >-
        {% set battery_level = states('sensor.multi02_battery')|int('unknown') %}
        {% set battery_round = (battery_level|int / 10)|int * 10 %}
        {% if battery_level == 'unknown' %}
        mdi:battery-unknown
        {% else %}
        {% if battery_round >= 100 %}
        mdi:battery
        {% elif battery_round > 0 %}
        mdi:battery-{{ battery_round }}
        {% else %}
        mdi:battery-alert
        {% endif %}
        {% endif %} 

    multi03_battery:
      friendly_name: "Multisensor3_Battery"
      value_template: "{% if states.zwave.vision_zp3111_multisensor_4in1_3 %}
        {{ states.zwave.vision_zp3111_multisensor_4in1_3.attributes.battery_level }}
        {% else %}
        unknown
        {% endif %}"
      unit_of_measurement: '%'
      # entity_id: zwave.multi03
      icon_template: >-
        {% set battery_level = states('sensor.multi03_battery')|int('unknown') %}
        {% set battery_round = (battery_level|int / 10)|int * 10 %}
        {% if battery_level == 'unknown' %}
        mdi:battery-unknown
        {% else %}
        {% if battery_round >= 100 %}
        mdi:battery
        {% elif battery_round > 0 %}
        mdi:battery-{{ battery_round }}
        {% else %}
        mdi:battery-alert
        {% endif %}
        {% endif %} 

    multi04_battery:
      friendly_name: "Multisensor4_Battery_ID19"
      value_template: "{% if states.zwave.vision_zp3111_multisensor_4in1_4 %}
        {{ states.zwave.vision_zp3111_multisensor_4in1_4.attributes.battery_level }}
        {% else %}
        unknown
        {% endif %}"
      unit_of_measurement: '%'
      # entity_id: zwave.multi04
      icon_template: >-
        {% set battery_level = states('sensor.multi04_battery')|int('unknown') %}
        {% set battery_round = (battery_level|int / 10)|int * 10 %}
        {% if battery_level == 'unknown' %}
        mdi:battery-unknown
        {% else %}
        {% if battery_round >= 100 %}
        mdi:battery
        {% elif battery_round > 0 %}
        mdi:battery-{{ battery_round }}
        {% else %}
        mdi:battery-alert
        {% endif %}
        {% endif %} 

#############################################
## WaterLeak01 Battery and Status  Node_Id:3
#############################################
    waterleaksensor01_battery:
      friendly_name: "Waterleak01_Battery"
      value_template: "{% if states.zwave.neo_coolcam_water_leakage_detector01 %}
        {{ states.zwave.neo_coolcam_water_leakage_detector01.attributes.battery_level }}
        {% else %}
        unknown
        {% endif %}"
      unit_of_measurement: '%' 
      # entity_id: zwave.neo_coolcam_water_leakage_detector01
      icon_template: >-
        {% set battery_level = states('sensor.waterleaksensor01_battery')|int('unknown') %}
        {% set battery_round = (battery_level|int / 10)|int * 10 %}
        {% if battery_level == 'unknown' %}
        mdi:battery-unknown
        {% else %}
        {% if battery_round >= 100 %}
        mdi:battery
        {% elif battery_round > 0 %}
        mdi:battery-{{ battery_round }}
        {% else %}
        mdi:battery-alert
        {% endif %}
        {% endif %}
#
        
    waterleakstatus01:
      friendly_name: "Basement"
      value_template: "{{ states('binary_sensor.neo_coolcam_water_leakage_detector_sensor01') }}"
      icon_template: >-
       {% if is_state('binary_sensor.neo_coolcam_water_leakage_detector_sensor01', 'on') %}
         mdi:water
       {% else %}
         mdi:water-off
       {% endif %}

#############################################
## WaterLeak02 Battery and Status  Node_Id:31
#############################################
    waterleaksensor02_battery:
      friendly_name: "Waterleak02_Battery"
      value_template: "{% if states.zwave.neo_coolcam_water_leakage_detector02 %}
        {{ states.zwave.neo_coolcam_water_leakage_detector02.attributes.battery_level }}
        {% else %}
        unknown
        {% endif %}"
      unit_of_measurement: '%' 
      # entity_id: zwave.neo_coolcam_water_leakage_detector02
      icon_template: >-
        {% set battery_level = states('sensor.waterleaksensor02_battery')|int('unknown') %}
        {% set battery_round = (battery_level|int / 10)|int * 10 %}
        {% if battery_level == 'unknown' %}
        mdi:battery-unknown
        {% else %}
        {% if battery_round >= 100 %}
        mdi:battery
        {% elif battery_round > 0 %}
        mdi:battery-{{ battery_round }}
        {% else %}
        mdi:battery-alert
        {% endif %}
        {% endif %}
#
        
    waterleakstatus02:
      friendly_name: "Kitchen"
      value_template: "{{ states('binary_sensor.neo_coolcam_water_leakage_detector_sensor02') }}"
      icon_template: >-
       {% if is_state('binary_sensor.neo_coolcam_water_leakage_detector_sensor02', 'on') %}
         mdi:water
       {% else %}
         mdi:water-off
       {% endif %}

#############################################
## WaterLeak03 Battery and Status  Node_Id:27
#############################################
    waterleaksensor03_battery:
      friendly_name: "Waterleak03_Battery"
      value_template: "{% if states.zwave.neo_coolcam_water_leakage_detector03 %}
        {{ states.zwave.neo_coolcam_water_leakage_detector03.attributes.battery_level }}
        {% else %}
        unknown
        {% endif %}"
      unit_of_measurement: '%' 
      # entity_id: zwave.neo_coolcam_water_leakage_detector03
      icon_template: >-
        {% set battery_level = states('sensor.waterleaksensor03_battery')|int('unknown') %}
        {% set battery_round = (battery_level|int / 10)|int * 10 %}
        {% if battery_level == 'unknown' %}
        mdi:battery-unknown
        {% else %}
        {% if battery_round >= 100 %}
        mdi:battery
        {% elif battery_round > 0 %}
        mdi:battery-{{ battery_round }}
        {% else %}
        mdi:battery-alert
        {% endif %}
        {% endif %}
#
        
    waterleakstatus03:
      friendly_name: "Laundry"
      value_template: "{{ states('binary_sensor.neo_coolcam_water_leakage_detector_sensor03') }}"
      icon_template: >-
       {% if is_state('binary_sensor.neo_coolcam_water_leakage_detector_sensor03', 'on') %}
         mdi:water
       {% else %}
         mdi:water-off
       {% endif %}
       
       
#############################################
## Thermostat  Node_Id:28
#############################################
- platform: template
  sensors:
    thermostat_battery:
      friendly_name: "Thermostat Battery"
      unit_of_measurement: "%"
      entity_id: sensor.time
      value_template: >-
        {%- if states.zwave['2gig_technologies_ct101_thermostat_iris'].attributes.battery_level %}
            {{ states.zwave['2gig_technologies_ct101_thermostat_iris'].attributes.battery_level }}
        {% else %}
            Unknown
        {%- endif %}
      icon_template: >-
        {% set battery_level = states('sensor.thermostat_battery')|int('unknown') %}
        {% set battery_round = (battery_level|int / 10)|int * 10 %}
        {% if battery_level == 'unknown' %}
        mdi:battery-unknown
        {% else %}
        {% if battery_round >= 100 %}
        mdi:battery
        {% elif battery_round > 0 %}
        mdi:battery-{{ battery_round }}
        {% else %}
        mdi:battery-alert
        {% endif %}
        {% endif %}
##
    thermostat_operation_mode_state:
      friendly_name: "Thermostat State"
      entity_id: sensor.time
      value_template: >
        {% set today = states('sensor.date').split('-') %}
        {% set month = today[1]|int %}
        {% set day = today[2]|int %}
        {% if month == 10 and day >= 1 or month == 11 or month == 12 or month == 1 or month == 2 or month == 3 or month == 4 and day <= 30 %}
          {{ states.climate['2gig_technologies_ct101_thermostat_iris_heating_1'].attributes.operating_state }}
        {% else %}
          {{ states.climate['2gig_technologies_ct101_thermostat_iris_cooling_1'].attributes.operating_state }}
        {% endif %}
      icon_template: >
        {% set today = states('sensor.date').split('-') %}
        {% set month = today[1]|int %}
        {% set day = today[2]|int %}
        {% if month == 10 and day >= 1 or month == 11 or month == 12 or month == 1 or month == 2 or month == 3 or month == 4 and day <= 30 %}
          mdi:weather-snowy
        {% else %}
          mdi:air-conditioner 
        {% endif %}
##
    thermostat_current_temperature:
      friendly_name: "Thermostat Current Temperature"
      unit_of_measurement: Â°C
      entity_id: sensor.time
      value_template: >
        {% set today = states('sensor.date').split('-') %}
        {% set month = today[1]|int %}
        {% set day = today[2]|int %}
        {% if month == 10 and day >= 1 or month == 11 or month == 12 or month == 1 or month == 2 or month == 3 or month == 4 and day <= 30 %}
          {{ states.climate['2gig_technologies_ct101_thermostat_iris_heating_1'].attributes.current_temperature }}
        {% else %}
          {{ states.climate['2gig_technologies_ct101_thermostat_iris_cooling_1'].attributes.current_temperature }}
        {% endif %}
      icon_template: >
        {% set today = states('sensor.date').split('-') %}
        {% set month = today[1]|int %}
        {% set day = today[2]|int %}
        {% if month == 10 and day >= 1 or month == 11 or month == 12 or month == 1 or month == 2 or month == 3 or month == 4 and day <= 30 %}
          mdi:fire
        {% else %}
          mdi:air-conditioner 
        {% endif %}
##
#    thermostat_cool_fan_state:
#      friendly_name: "Thermostat Cool Fan State"
#      entity_id: sensor.time
#      value_template: >-
#        {%- if states.climate['2gig_technologies_ct101_thermostat_iris_cooling_1'].attributes.fan_state %}
#            {{ states.climate['2gig_technologies_ct101_thermostat_iris_cooling_1'].attributes.fan_state }}
#        {% else %}
#            Unknown
#        {%- endif %}
##
#    thermostat_heat_fan_state:
#      friendly_name: "Thermostat Heat Fan State"
#      entity_id: sensor.time
#      value_template: >-
#        {%- if states.climate['2gig_technologies_ct101_thermostat_iris_heating_1'].attributes.fan_state %}
#            {{ states.climate['2gig_technologies_ct101_thermostat_iris_heating_1'].attributes.fan_state }}
#        {% else %}
#            Unknown
#        {%- endif %}
##
#    thermostat_cool_operation_mode_state:
#      friendly_name: "Thermostat Cool State"
#      entity_id: sensor.time
#      value_template: >-
#        {%- if states.climate['2gig_technologies_ct101_thermostat_iris_cooling_1'].attributes.operating_state %}
#            {{ states.climate['2gig_technologies_ct101_thermostat_iris_cooling_1'].attributes.operating_state }}
#        {% else %}
#            Unknown
#        {%- endif %}
#      icon_template: >-
#        mdi:snowflake  
#
#
################
## MQQT_Sensor
################
- platform: mqtt
  state_topic: 'RTL_433/JSON'
  name: 'Basement P1 Temperature'
  unit_of_measurement: "Â°C"
  value_template: "{% if value_json.model == 'Prologue sensor' and value_json.channel == 1 and value_json.id == 5 %}{{ value_json.temperature_C | round(1) }}{% else %}{{ states.sensor.basement_p1_temperature.state }}{% endif %}"

- platform: mqtt
  state_topic: 'RTL_433/JSON'
  name: 'Basement P1 Humidity'
  unit_of_measurement: "%"
  value_template: "{% if value_json.model == 'Prologue sensor' and value_json.channel == 1 and value_json.id == 5 %}{{ value_json.humidity | round(1) }}{% else %}{{ states.sensor.basement_p1_humidity.state }}{% endif %}"

- platform: mqtt
  state_topic: 'RTL_433/JSON'
  name: 'Basement P1 Battery'
  value_template: "{% if value_json.model == 'Prologue sensor' and value_json.channel == 1 and value_json.id == 5 %}{{ value_json.battery }}{% else %}{{ states.sensor.basement_p1_battery.state }}{% endif %}"

- platform: mqtt
  state_topic: 'RTL_433/JSON'
  name: 'ChatRoom P2 Temperature'
  unit_of_measurement: "Â°C"
  value_template: "{% if value_json.model == 'Prologue sensor' and value_json.channel == 2 and value_json.id == 5 %}{{ value_json.temperature_C | round(1) }}{% else %}{{ states.sensor.chatroom_p2_temperature.state }}{% endif %}"

- platform: mqtt
  state_topic: 'RTL_433/JSON'
  name: 'ChatRoom P2 Humidity'
  unit_of_measurement: "%"
  value_template: "{% if value_json.model == 'Prologue sensor' and value_json.channel == 2 and value_json.id == 5 %}{{ value_json.humidity | round(1) }}{% else %}{{ states.sensor.chatroom_p2_humidity.state }}{% endif %}"

- platform: mqtt
  state_topic: 'RTL_433/JSON'
  name: 'ChatRoom P2 Battery'
  value_template: "{% if value_json.model == 'Prologue sensor' and value_json.channel == 2 and value_json.id == 5 %}{{ value_json.battery }}{% else %}{{ states.sensor.chatroom_p2_battery.state }}{% endif %}"

- platform: mqtt
  state_topic: 'RTL_433/JSON'
  name: 'Kitchen P3 Temperature'
  unit_of_measurement: "Â°C"
  value_template: "{% if value_json.model == 'Prologue sensor' and value_json.channel == 3 and value_json.id == 5 %}{{ value_json.temperature_C | round(1) }}{% else %}{{ states.sensor.kitchen_p3_temperature.state }}{% endif %}"

- platform: mqtt
  state_topic: 'RTL_433/JSON'
  name: 'Kitchen P3 Humidity'
  unit_of_measurement: "%"
  value_template: "{% if value_json.model == 'Prologue sensor' and value_json.channel == 3 and value_json.id == 5 %}{{ value_json.humidity | round(1) }}{% else %}{{ states.sensor.kitchen_p3_humidity.state }}{% endif %}"

- platform: mqtt
  state_topic: 'RTL_433/JSON'
  name: 'Kitchen P3 Battery'
  value_template: "{% if value_json.model == 'Prologue sensor' and value_json.channel == 3 and value_json.id == 5 %}{{ value_json.battery }}{% else %}{{ states.sensor.kitchen_p3_battery.state }}{% endif %}"

- platform: mqtt
  state_topic: 'RTL_433/JSON'
  name: 'Garage T1 Temperature'
  unit_of_measurement: "Â°C"
  value_template: "{% if value_json.model == 'THGR122N' and value_json.channel == 1 %}{{ value_json.temperature_C | round(1) }}{% else %}{{ states.sensor.garage_t1_temperature.state }}{% endif %}"

- platform: mqtt
  state_topic: 'RTL_433/JSON'
  name: 'Garage T1 Humidity'
  unit_of_measurement: "%"
  value_template: "{% if value_json.model == 'THGR122N' and value_json.channel == 1 %}{{ value_json.humidity | round(1) }}{% else %}{{ states.sensor.garage_t1_humidity.state }}{% endif %}"

- platform: mqtt
  state_topic: 'RTL_433/JSON'
  name: 'Garage T1 Battery'
  value_template: "{% if value_json.model == 'THGR122N' and value_json.channel == 1 %}{{ value_json.battery }}{% else %}{{ states.sensor.garage_t1_battery.state }}{% endif %}"

- platform: mqtt
  state_topic: 'RTL_433/JSON'
  name: 'Bathroom T2 Temperature'
  unit_of_measurement: "Â°C"
  value_template: "{% if value_json.model == 'THGR122N' and value_json.channel == 2 %}{{ value_json.temperature_C | round(1) }}{% else %}{{ states.sensor.bathroom_t2_temperature.state }}{% endif %}"

- platform: mqtt
  state_topic: 'RTL_433/JSON'
  name: 'Bathroom T2 Humidity'
  unit_of_measurement: "%"
  value_template: "{% if value_json.model == 'THGR122N' and value_json.channel == 2 %}{{ value_json.humidity | round(1) }}{% else %}{{ states.sensor.bathroom_t2_humidity.state }}{% endif %}"

- platform: mqtt
  state_topic: 'RTL_433/JSON'
  name: 'Bathroom T2 Battery'
  value_template: "{% if value_json.model == 'THGR122N' and value_json.channel == 2 %}{{ value_json.battery }}{% else %}{{ states.sensor.bathroom_t2_battery.state }}{% endif %}"

- platform: mqtt
  state_topic: 'RTL_433/JSON'
  name: 'Office T3 Temperature'
  unit_of_measurement: "Â°C"
  value_template: "{% if value_json.model == 'THGR122N' and value_json.channel == 3 %}{{ value_json.temperature_C | round(1) }}{% else %}{{ states.sensor.office_t3_temperature.state }}{% endif %}"

- platform: mqtt
  state_topic: 'RTL_433/JSON'
  name: 'Office T3 Humidity'
  unit_of_measurement: "%"
  value_template: "{% if value_json.model == 'THGR122N' and value_json.channel == 3 %}{{ value_json.humidity | round(1) }}{% else %}{{ states.sensor.office_t3_humidity.state }}{% endif %}"

- platform: mqtt
  state_topic: 'RTL_433/JSON'
  name: 'Office T3 Battery'
  value_template: "{% if value_json.model == 'THGR122N' and value_json.channel == 3 %}{{ value_json.battery }}{% else %}{{ states.sensor.office_t3_battery.state }}{% endif %}"

- platform: mqtt
  state_topic: 'RTL_433/JSON'
  name: 'VladsBed K2 Temperature'
  unit_of_measurement: "Â°C"
  value_template: "{% if value_json.model == 'Kedsum Temperature & Humidity Sensor' and value_json.channel == 2 %}{{ value_json.temperature_F | round(1) }}{% else %}{{ states.sensor.vladsbed_k2_temperature.state }}{% endif %}"

- platform: mqtt
  state_topic: 'RTL_433/JSON'
  name: 'VladsBed K2 Humidity'
  unit_of_measurement: "%"
  value_template: "{% if value_json.model == 'Kedsum Temperature & Humidity Sensor' and value_json.channel == 3 %}{{ value_json.humidity | round(1) }}{% else %}{{ states.sensor.vladsbed_k2_humidity.state }}{% endif %}"
